#!/usr/bin/with-contenv bash

if [[ -z ${PUBLIC_KEY} || -z ${END_POINT} ]]; then
  echo "[$(date -Iseconds)] Selecting a random server..."
  api_url="https://api.nordvpn.com/v1/servers?filters"
  technology_filter="\[servers_technologies\]\[identifier\]=wireguard_udp"

  # Get the country code from the country name (if provided) and add it to the API URL as a filter
  if [[ -n ${COUNTRY_CODE} ]]; then
    country_id=$(curl --silent "https://api.nordvpn.com/v1/servers/countries" | jq --raw-output ".[] | select(.code == \"${COUNTRY_CODE}\") | [.name, .id] | \"\(.[1])\"")
    echo "[$(date -Iseconds)] Country ID: ${country_id}"
    country_filter="\[country_id\]=${country_id}"
    api_url="${api_url}${country_filter}&${technology_filter}"
    echo "[$(date -Iseconds)] API URL: ${api_url}"
  else
    api_url="${api_url}${technology_filter}"
  fi

  # Fetch all servers with WireGuard support
  servers=$(curl --retry 3 -LsS "${api_url}")
  server_count=$(echo "$servers" | jq 'length')
  if [[ "$server_count" -eq 0 ]]; then
    echo "[$(date -Iseconds)] No servers found ¯\\_(⊙︿⊙)_/¯"
    sleep infinity
  fi
  random_index=$(shuf -i 0-$(($server_count - 1)) -n 1)
  server=$(echo "$servers" | jq ".[$random_index]")
  echo "[$(date -Iseconds)] Random server: $(echo $server | jq -r .hostname)"
  if [[ -z ${server} ]]; then
    echo "[$(date -Iseconds)] Unable to select a server ¯\\_(⊙︿⊙)_/¯"
    sleep infinity
  fi
  if [[ -z ${PUBLIC_KEY} ]]; then
    PUBLIC_KEY=$(echo "$server" | jq -r '.technologies[] | select( .identifier == "wireguard_udp" ) | .metadata[] | select( .name == "public_key" ) | .value')
  fi
  if [[ -z ${END_POINT} ]]; then
    END_POINT=$(echo "$server" | jq -r '.hostname'):51820
  fi
fi

[[ -z "${PRIVATE_KEY}" ]] && [[ -f "${PRIVATE_KEY_FILE}" ]] && PRIVATE_KEY="$(head -n 1 "${PRIVATE_KEY_FILE}")"

( umask 077 && { cat >/etc/wireguard/wg0.conf <<-EOF
[Interface]
PrivateKey = ${PRIVATE_KEY}
ListenPort = ${LISTEN_PORT:-51820}
Address = ${ADDRESS:-10.5.0.2/32}
DNS = ${DNS:-103.86.96.100,103.86.99.100}
Table = ${TABLE}
PreUp = ${PRE_UP}
PostUp = ${POST_UP}
PreDown = ${PRE_DOWN}
PostDown = ${POST_DOWN}

[Peer]
Endpoint = ${END_POINT}
PublicKey = ${PUBLIC_KEY}
AllowedIPs = ${ALLOWED_IPS:-0.0.0.0/0}
PersistentKeepalive = ${PERSISTENT_KEEP_ALIVE:-25}
EOF
} && sync )

echo "[$(date -Iseconds)] Connecting..."
wg-quick up wg0 

# Get external IP address with timeout and fallback
EXTERNAL_IP=$(curl -s --max-time 5 https://api.ipify.org || curl -s --max-time 5 https://ifconfig.me || echo "unknown")
echo "[$(date -Iseconds)] Connected! External IP: ${EXTERNAL_IP}"


if [[ -n ${RECONNECT} ]]; then
  echo "[$(date -Iseconds)] Reconnecting in ${RECONNECT} seconds"
fi
sleep "${RECONNECT:-infinity}"
